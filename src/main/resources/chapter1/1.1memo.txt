스프링의 IoC 컨테이너는 일반적으로 ApplicationContext를 말한다.
스프링의 빈 팩토리와 어플리케이션 컨텍스트는 각각 기능을 대표하는 BeanFactory와 ApplicationContext라는 두 개의 인터페이스로 정의되어 있다.

ApplicationContext 인터페이스는 BeanFactory 인터페이스를 상속한 서브인터페이스이다.

각자 기능에 충실하게 독립적으로 설계된 POJO 클래스를 만들고, 결합도가 낮은 유연한 관계를 가질 수 있도록 인터페이스를 이용ㅎ 연결해주는 것까지가 IoC 컨테이너가 사용할 POJO를 준비하는 첫 단계이다.

스프링의 메타정보는 특정한 파일 포맷이나 형식에 제한되거나 종속되지 않는다. 대신 XML 이든 소스코드 애노테이션이든 자바 코드이든 프로퍼티 파일이든 상관없이 BeanDefinition으로 정의되는 스프링의 설정 메타정보의 내용을 표현한 것이 있다면 무엇이든 사용 가능하다.
원본의 포맷과 구조, 자료의 특성에 맞게 읽어와 BeanDefinition 오브젝트로 변환해주는 BeanDefinitionReader가 있으면 된다.

BeanDefinition의 메타 정보
- 빈 아이디, 이름, 별칭 : 빈 오브젝트를 구분할 수 있는 식별자
- 클래스 또는 클래스 이름 : 빈으로 만들 POJO클래스 또는 서비스 클래스 정보
- 스코프 : 싱글톤, 프로토타입과 같은 빈의 생성 방식과 존재 범위
- 프로퍼티 값 또는 참조 : DI에 사용할 프로퍼티 이름과 값 또는 참조하는 빈의 이름
- 생성자 파라미터 값 또는 참조 : DI에 사용할 생성자 파라미터 이름과 값 또는 참조할 빈의 이름
- 지연된 로딩 여부, 우선 빈 여부, 자동와이어링 여부, 부모 빈 정보 등...

스프링이 제공하는 ApplicationContext 구현 클래스의 종류
1. StaticApplicationContext
코드를 통해 빈 메타정보를 등록하기 위해 사용한다.
스프링의 기능에 대한 학습 테스트를 만들 때를 제외하면 실제로 사용되지 않는다.

2. GenericApplicationContext
가장 일반적이 컨텍스트의 구현 클래스. 실전에서 사용될 수 있는 모든 기능을 갖추고 있는 어플리케이션 컨텍스트다.
StaticApplicationContext와 달리 XML파일과 같은 외부의 리소스에 있는 빈 설정 메타정보를 리더를 통해 읽어들여서 메타정보로 전환해 사용한다.
특정 포맷의 빈 설정 메타정보를 읽어서 컨텍스트가 사용할 수 있는 BeanDefinition 정보로 변환하는 기능을 가진 오브젝트는 BeanDefinitionReader 인터페이스를 구현해서 만든다.