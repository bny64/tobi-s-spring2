스프링의 IoC 컨테이너는 일반적으로 ApplicationContext를 말한다.
스프링의 빈 팩토리와 어플리케이션 컨텍스트는 각각 기능을 대표하는 BeanFactory와 ApplicationContext라는 두 개의 인터페이스로 정의되어 있다.

ApplicationContext 인터페이스는 BeanFactory 인터페이스를 상속한 서브인터페이스이다.

각자 기능에 충실하게 독립적으로 설계된 POJO 클래스를 만들고, 결합도가 낮은 유연한 관계를 가질 수 있도록 인터페이스를 이용ㅎ 연결해주는 것까지가 IoC 컨테이너가 사용할 POJO를 준비하는 첫 단계이다.

스프링의 메타정보는 특정한 파일 포맷이나 형식에 제한되거나 종속되지 않는다. 대신 XML 이든 소스코드 애노테이션이든 자바 코드이든 프로퍼티 파일이든 상관없이 BeanDefinition으로 정의되는 스프링의 설정 메타정보의 내용을 표현한 것이 있다면 무엇이든 사용 가능하다.
원본의 포맷과 구조, 자료의 특성에 맞게 읽어와 BeanDefinition 오브젝트로 변환해주는 BeanDefinitionReader가 있으면 된다.

BeanDefinition의 메타 정보
- 빈 아이디, 이름, 별칭 : 빈 오브젝트를 구분할 수 있는 식별자
- 클래스 또는 클래스 이름 : 빈으로 만들 POJO클래스 또는 서비스 클래스 정보
- 스코프 : 싱글톤, 프로토타입과 같은 빈의 생성 방식과 존재 범위
- 프로퍼티 값 또는 참조 : DI에 사용할 프로퍼티 이름과 값 또는 참조하는 빈의 이름
- 생성자 파라미터 값 또는 참조 : DI에 사용할 생성자 파라미터 이름과 값 또는 참조할 빈의 이름
- 지연된 로딩 여부, 우선 빈 여부, 자동와이어링 여부, 부모 빈 정보 등...

스프링이 제공하는 ApplicationContext 구현 클래스의 종류
1. StaticApplicationContext
코드를 통해 빈 메타정보를 등록하기 위해 사용한다.
스프링의 기능에 대한 학습 테스트를 만들 때를 제외하면 실제로 사용되지 않는다.

2. GenericApplicationContext
가장 일반적이 컨텍스트의 구현 클래스. 실전에서 사용될 수 있는 모든 기능을 갖추고 있는 어플리케이션 컨텍스트다.
StaticApplicationContext와 달리 XML파일과 같은 외부의 리소스에 있는 빈 설정 메타정보를 리더를 통해 읽어들여서 메타정보로 전환해 사용한다.
특정 포맷의 빈 설정 메타정보를 읽어서 컨텍스트가 사용할 수 있는 BeanDefinition 정보로 변환하는 기능을 가진 오브젝트는 BeanDefinitionReader 인터페이스를 구현해서 만든다.

XMLBeanDefinitionReader는 스프링의 리소스 로더를 이용해 XML 내용을 읽어온다.
리소스 대신 스트링을 넘기면 기본적으로 클래스패스를 리소스로 인식한다.
classpath:나 file:, http: 같은 접두어를 이용해 구체적인 리소스 타입을 지정해도 된다.
스프링 IoC 컨테이너가 사용할 수 있는 BeanDefinition 오브젝트로 변환만 될 수 있다면 설정 메타정보는 어떤 포맷으로 만들어져도 상관없다.

3. GenericXmlApplicationContext
코드에서 GenericApplicationContext를 사용하는 경우에는 번거롭게 XmlBeanDefinitionReader를 만들지 말고 이 두개의 클래스가 결합된 GenericXmlApplicationContext를 사용하면 편리하다.
GenericXmlApplicationContext는 XmlBeanDeficition를 내장하고 있기 때문에 XML 파일을 읽어들이고 refresh()를 통해 초기화하는 것까지 한 줄로 끝낼 수 있다.

4. WebApplicationContext
스프링 어플리케이션에서 가장 많이 사용되는 어플리케이션 컨텍스트는 바로 WebApplicationContext이다.
웹 환경에서 사용할 때 필요한 기능이 추가된 어플리케이션 컨텍스트이다.
스프링 어플리케이션은 대부분 서블릿 기반의 독립 웹 어플리케이션(WAR)으로 만들어지기 때문이다.
가장 많이 사용되는 건 XmlWebApplicationContext다.
어노테이션을 이용한 설정 리소스만 사용하려면 AnnotationConfigWebApplicationContext를 사용하면 된다.
디폴트는 XmlWebApplicationContext다.
IoC 컨테이너에서 getBean으로 빈 오브젝트를 한 번 가져오면 빈 오브젝트들끼리 DI로 서로 연결되어 있으므로 의존관계를 타고 호출되면서 어플리케이션이 동작할 것이다.
IoC 컨테이너의 역할은 이렇게 초기에 빈 오브젝트를 생성하고 DI 한 후에 최초로 어플리케이션을 기동할 빈 하나를 제공해주는 것까지다.
웹 환경에서는 main() 메서드 대신 서블릿 컨테이너가 브라우저로 오는 HTTP 요청을 받아서 해당 요청에 매핑되어 있는 서블릿을 실행해주는 방식으로 동작한다. 서블릿이 일종의 main() 메서드와 같은 역할을 하는 셈이다.
웹 어플리케이션에서 스프링 어플리케이션을 기동시키는 방법은 뭘까?
일단 main() 메서드 역할을 하는 서블릿을 만들어두고, 미리 어플리케이션 컨텍스트를 생성해 둔 다음, 요청이 서블릿으로 들어올 때 마다 getBean()으로필요한 빈을 가져와 정해진 메서드를 실행해주면 된다.
서블릿 컨테이너는 브라우저와 같은 클라이언트로부터 들어오는 요청을 받아서 서블릿을 동작시켜주는 일을 맡는다.
스프링은 이런 웹 환경에서 어플리케이션 컨텍스트를 생성하고 설정 메타정보로 초기화해주고, 클라이언트로 부터 들어오는 요청마다 적절한 빈을 찾아서 이를 실행해주는 기능을 가진 DispatcherServlet이라는 서블릿을 제공한다.
스프링이 제공해준 서블릿을 web.xml에 등록하는 것만으로 웹 환경에서 스프링 컨테이너가 만들어지고 어플리케이션을 실행하는 데 필요한 대부분의 준비는 끝이다.