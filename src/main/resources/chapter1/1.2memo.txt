빈 설정 메타정보 항목
beanClassName : 빈 오브젝트 클래스 이름
parentName : 빈 메타정보를 상속받을 부모 BeanDefinition 이름
factoryBeanName: 팩토리 빈 이름
factoryMethodName : 다른 빈 또는 클래스의 메서드를 통해 빈 오브젝트를 생성하는 경우 메서드 이름
scope : 생명주기를 결정하는 스코프, 싱글톤 혹은 비싱글톤
lazyInit : 빈 오브젝트의 생성을 최대한 지연할 것인지 지정
dependsOn : 먼저 만들어져야 하는 빈을 지정할 수 있다. 빈 오브젝트의 생성 순서가 보장되어야 하는 경우 이용
autowireCandidate : 명시적인 설정이 없어도 미리 정해진 규칙을 가지고 자등올 DI 후보를 결졍하는 자동 와어어링 대상으로 포함시킬지 여부
primary : DI 대상후보가 여러 개가 발생하는 경우, 최종 선택의 우선권 부여
abstract : 메타정보 상속에만 사용할 추상 빈으로 만들지의 여부
autowireMode : 오토와이어링 전략
dependencyCheck : 프로퍼티 값 또는 레퍼런스가 모두 설정되어 있는지 검증하는 작업의 종류
initMethod : 빈이 생성되고 DI를 마친 뒤 실행할 초기화 메서드
destroyMethod : 빈의 생명주기가 다 되서 제거하기 전에 호출할 메서드
propertyValues : 프로퍼티의 이름과 설정 값 또는 레퍼런스, 수정자 메서드를 통한 DI 작업에서 사용
constructorArgumentValues : 생성자의 이름과 설정 값 또는 레퍼런스, 생성자를 통한 DI 작업에서 사용
annotationMetadata : 빈 클래스에 담긴 애노테이션과 그 애트리뷰트 값, 애노테이션을 이용하는 설정에서 활용

빈 등록 방법
1. XML <bean> 태그
    기본적으로 id와 class라는 두 개의 애트리뷰트가 필요하다.
    <bean>은 다른 빈의 <property>태그 안에 정의할 수도 있다.
    다른 빈의 설정 안에 정의되는 빈을 내부 빈(inner bean)이라고 하는데 아이디가 없으므로 다른 빈에서 참조할 수 없다.

2. 네임스페이스와 전용 태그
    pointcut과 같은 빈들은 핵심 로직을 담은 컴포넌트가 아니고 어플리케이션 컨텍스트가 활용하는 기술적인 설정 정보를 담고 있을 뿐이다.
    컨텍스트가 사용하는 설정정보를 담은 빈과 어플리케이션 3계층에 포함되는 어플리케이션 로직을 담은 빈이 동일하게 <bean>이라는 태그를 사용해서 만들어지기 때문에 구분이 잘 안되고 빈의 등록이 어떤 의도와 의미를 갖고 있는지 파악하기 어렵다.
    스프링은 이런 기술적인 설정과 기반 서비스를 빈으로 등록할 때를 위해 의미가 잘 드러나는 네임 스페이스와 태그를 가진 설정방법을 제공한다.
    <aop:pointcut id="mypointcut" expression"..."/>

3.